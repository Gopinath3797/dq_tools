# Use Python 3.9 for current dbt-core
image: python:3.9-slim

.prepare_snowflake_env: &prepare_snowflake_env
  - export DBT_SNOWFLAKE_TEST_ACCOUNT=$DBT_TEST_ACCOUNT
  - export DBT_SNOWFLAKE_TEST_USER=$DBT_TEST_USER
  - export DBT_ENV_SECRET_SNOWFLAKE_TEST_PASSWORD=$DBT_TEST_PASSWORD
  - export DBT_SNOWFLAKE_TEST_ROLE=$DBT_TEST_ROLE
  - export DBT_SNOWFLAKE_TEST_DATABASE=$DBT_TEST_DATABASE
  - export DBT_SNOWFLAKE_TEST_WAREHOUSE=$DBT_TEST_WAREHOUSE

.prepare_bigquery_env: &prepare_bigquery_env
  - export DBT_ENV_SECRET_BIGQUERY_SERVICE_KEY_PATH=$DBT_ENV_SECRET_BIGQUERY_SERVICE_KEY_PATH
  - export DBT_BIGQUERY_TEST_DATABASE=$DBT_BIGQUERY_TEST_DATABASE

.prepare_aws_env: &prepare_aws_env
  # Role: gitlab_admin_role
  - >
    STS=($(aws sts assume-role-with-web-identity
    --role-arn ${ROLE_ARN}
    --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
    --web-identity-token $CI_JOB_JWT_V2
    --duration-seconds 3600
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
    --output text))
  - export AWS_ACCESS_KEY_ID="${STS[0]}"
  - export AWS_SECRET_ACCESS_KEY="${STS[1]}"
  - export AWS_SESSION_TOKEN="${STS[2]}"

before_script:
  - python --version  # For debugging
  # Install pip
  - pip install --upgrade pip
  # Install aws cli
  - apt-get update && apt-get install -y curl unzip
  - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  - unzip awscliv2.zip
  - ./aws/install

# Publish dbt docs on master
publish-dbt-docs:
  stage: deploy
  script:
    # Install dbt
    - pip install 'dbt-core>=1.2,<1.3' --upgrade
    - pip install 'dbt-snowflake>=1.2,<1.3' --upgrade
    - *prepare_snowflake_env
    - *prepare_aws_env
    - chmod +x run_publish_docs.sh # Add executable permission to sh script
    # Run publish
    - ./run_publish_docs.sh snowflake
  only:
    # - merge_requests
    - master

# Snowflake
integration-test-snowflake-dbt-1-0:
  stage: test
  retry: 1
  script:
    # Install dbt
    - pip install 'dbt-core>=1.0,<1.1' --upgrade
    - pip install 'dbt-snowflake>=1.0,<1.1' --upgrade
    - cp -fr ./integration_tests/packages_1_0.yml ./integration_tests/packages.yml ## package's version compatibility
    - *prepare_snowflake_env
    - chmod +x run_test.sh # Add executable permission to sh script
    # Run test
    - ./run_test.sh snowflake
  only:
    - merge_requests

integration-test-snowflake-dbt-1-1:
  stage: test
  needs: [
    "integration-test-snowflake-dbt-1-0"
  ]
  retry: 1
  script:
    # Install dbt
    - pip install 'dbt-core>=1.1,<1.2' --upgrade
    - pip install 'dbt-snowflake>=1.1,<1.2' --upgrade
    - cp -fr ./integration_tests/packages_1_1.yml ./integration_tests/packages.yml ## package's version compatibility
    - *prepare_snowflake_env
    - chmod +x run_test.sh # Add executable permission to sh script
    # Run test
    - ./run_test.sh snowflake
  only:
    - merge_requests

integration-test-snowflake-dbt-1-2:
  stage: test
  needs: [
    "integration-test-snowflake-dbt-1-1"
  ]
  script:
    # Install dbt
    - pip install 'dbt-core>=1.2,<1.3' --upgrade
    - pip install 'dbt-snowflake>=1.2,<1.3' --upgrade
    - *prepare_snowflake_env
    - chmod +x run_test.sh # Add executable permission to sh script
    # Run test
    - ./run_test.sh snowflake
  only:
    - merge_requests

# integration-test-snowflake-dbt-1-3: # disabled as not yet having dbt-utils 1.0!
#   stage: test
#   needs: [
#     "integration-test-snowflake-dbt-1-2"
#   ]
#   script:
#     # Install dbt
#     - pip install 'dbt-core>=1.3,<1.4' --upgrade
#     - pip install 'dbt-snowflake>=1.3,<1.4' --upgrade
#     - cp -fr ./integration_tests/packages_1_3.yml ./integration_tests/packages.yml ## package's version compatibility
#     - *prepare_snowflake_env
#     - chmod +x run_test.sh # Add executable permission to sh script
#     # Run test
#     - ./run_test.sh snowflake
#   only:
#     - merge_requests

# Big Query
integration-test-bigquery-dbt-1-0:
  stage: test
  retry: 1
  script:
    # Install dbt
    - pip install 'dbt-core>=1.0,<1.1' --upgrade
    - pip install 'dbt-bigquery>=1.0,<1.1' --upgrade
    - cp -fr ./integration_tests/packages_1_0.yml ./integration_tests/packages.yml ## package's version compatibility
    - *prepare_bigquery_env
    - chmod +x run_test.sh # Add executable permission to sh script
    - ./run_test.sh bigquery
  only:
    - merge_requests

integration-test-bigquery-dbt-1-1:
  stage: test
  needs: [
    "integration-test-bigquery-dbt-1-0"
  ]
  retry: 1
  script:
    # Install dbt
    - pip install 'dbt-core>=1.1,<1.2' --upgrade
    - pip install 'dbt-bigquery>=1.1,<1.2' --upgrade
    - cp -fr ./integration_tests/packages_1_1.yml ./integration_tests/packages.yml ## package's version compatibility
    - *prepare_bigquery_env
    - chmod +x run_test.sh # Add executable permission to sh script
    - ./run_test.sh bigquery
  only:
    - merge_requests

integration-test-bigquery-dbt-1-2:
  stage: test
  needs: [
    "integration-test-bigquery-dbt-1-1"
  ]
  retry: 1
  script:
    # Install dbt
    - pip install 'dbt-core>=1.2,<1.3' --upgrade
    - pip install 'dbt-bigquery>=1.2,<1.3' --upgrade
    - *prepare_bigquery_env
    - chmod +x run_test.sh # Add executable permission to sh script
    - ./run_test.sh bigquery
  only:
    - merge_requests